import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { getWeek, getYear } from 'date-fns'

export async function POST(request: NextRequest) {
  try {
    // Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ
    const authHeader = request.headers.get('authorization')
    const token = authHeader?.replace('Bearer ', '')
    
    if (token !== process.env.CRON_SECRET) {
      return NextResponse.json(
        { status: 'error', message: 'Unauthorized' },
        { status: 401 }
      )
    }

    const now = new Date()
    const week = getWeek(now)
    const year = getYear(now)

    // ÈÄ±Èñì„Éà„É¨„É≥„Éâ„Éá„Éº„Çø„ÇíÂèñÂæó
    const trends = await prisma.trendData.findMany({
      where: {
        weekNumber: week,
        year: year,
      },
      orderBy: {
        views: 'desc'
      },
      take: 10
    })

    // „É¢„ÉÉ„ÇØË®ò‰∫ãÁîüÊàê
    const mockArticle = {
      title: `${year}Âπ¥Á¨¨${week}ÈÄ± YouTube & TikTok „Éà„É¨„É≥„ÉâÂàÜÊûê„É¨„Éù„Éº„Éà`,
      content: `# ${year}Âπ¥Á¨¨${week}ÈÄ± „Éà„É¨„É≥„ÉâÂàÜÊûê„É¨„Éù„Éº„Éà

## üìä ‰ªäÈÄ±„ÅÆ„Éè„Ç§„É©„Ç§„Éà

‰ªäÈÄ±Ôºà${year}Âπ¥Á¨¨${week}ÈÄ±Ôºâ„ÅØ${trends.length}‰ª∂„ÅÆ„Éà„É¨„É≥„Éâ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåÂèéÈõÜ„Åï„Çå„Åæ„Åó„Åü„ÄÇ

### ‰∏ªË¶Å„Éà„É¨„É≥„Éâ

**1. „Ç®„É≥„Çø„Éº„ÉÜ„Ç§„É°„É≥„ÉàÂàÜÈáé„ÅÆÂè∞È†≠**
${trends.filter(t => t.category === 'Entertainment').length}‰ª∂„ÅÆ„Ç®„É≥„Çø„É°„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åå„É©„É≥„Ç≠„É≥„Ç∞‰∏ä‰Ωç„ÇíÂç†„ÇÅ„Å¶„ÅÑ„Åæ„Åô„ÄÇ

**2. Èü≥Ê•Ω„Éª„Ç≤„Éº„É†ÂàÜÈáé„ÅÆÂÆâÂÆö„Åó„Åü‰∫∫Ê∞ó**
- Èü≥Ê•Ω: ${trends.filter(t => t.category === 'Music').length}‰ª∂
- „Ç≤„Éº„É†: ${trends.filter(t => t.category === 'Gaming').length}‰ª∂

### Ê≥®ÁõÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ

${trends.slice(0, 3).map((trend, index) => `
**${index + 1}. ${trend.title}**
- „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†: ${trend.platform}
- Ë¶ñËÅ¥Êï∞: ${Number(trend.views).toLocaleString()}Âõû
- „Ç´„ÉÜ„Ç¥„É™: ${trend.category}
`).join('')}

## üéØ „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÂàÜÊûê

### YouTube
- Á∑èÂãïÁîªÊï∞: ${trends.filter(t => t.platform === 'YOUTUBE').length}‰ª∂
- ‰∏ªË¶Å„Ç´„ÉÜ„Ç¥„É™: „Ç®„É≥„Çø„É°„ÄÅ„Ç≤„Éº„É†„ÄÅÈü≥Ê•Ω

### TikTok
- Á∑èÂãïÁîªÊï∞: ${trends.filter(t => t.platform === 'TIKTOK').length}‰ª∂
- ÁâπÂæ¥: „ÉÄ„É≥„Çπ„ÄÅ„Éö„ÉÉ„Éà„ÄÅÊñôÁêÜÁ≥ª„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åå‰∫∫Ê∞ó

## üìà ‰ªäÂæå„ÅÆÂ±ïÊúõ

‰ªäÈÄ±„ÅÆ„Éà„É¨„É≥„Éâ„Åã„Çâ„ÄÅ‰ª•‰∏ã„ÅÆÂÇæÂêë„ÅåË™≠„ÅøÂèñ„Çå„Åæ„ÅôÔºö

1. **„Ç®„É≥„Çø„É°„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÂ§öÊßòÂåñ**
2. **„Ç∑„Éß„Éº„ÉàÂãïÁîª„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅÆÂÆöÁùÄ**
3. **Êó•Êú¨Áã¨Ëá™„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÂõΩÈöõÁöÑÊ≥®ÁõÆ**

## „Åæ„Å®„ÇÅ

${year}Âπ¥Á¨¨${week}ÈÄ±„ÅØ„ÄÅÁâπ„Å´„Ç®„É≥„Çø„Éº„ÉÜ„Ç§„É°„É≥„ÉàÂàÜÈáé„ÅßÂ§ö„Åè„ÅÆË©±È°å‰Ωú„ÅåÁîü„Åæ„Çå„Åæ„Åó„Åü„ÄÇ„ÇØ„É™„Ç®„Ç§„Çø„Éº„Å´„Å®„Å£„Å¶„ÄÅ„Åì„ÅÆÂãïÂêë„ÇíÂèÇËÄÉ„Å´„Åó„Åü„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰Ωú„ÅåÂäπÊûúÁöÑ„Å®ËÄÉ„Åà„Çâ„Çå„Åæ„Åô„ÄÇ

---
*„Åì„ÅÆ„É¨„Éù„Éº„Éà„ÅØËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü*`,
      summary: `${year}Âπ¥Á¨¨${week}ÈÄ±„ÅÆYouTube„ÉªTikTok„Éà„É¨„É≥„ÉâÂàÜÊûê„ÄÇ„Ç®„É≥„Çø„É°${trends.filter(t => t.category === 'Entertainment').length}‰ª∂„ÄÅ„Ç≤„Éº„É†${trends.filter(t => t.category === 'Gaming').length}‰ª∂„Åå‰∏ä‰Ωç„Å´„É©„É≥„ÇØ„Ç§„É≥„ÄÇ`,
      articleType: 'WEEKLY' as const,
      platforms: ['YOUTUBE', 'TIKTOK'] as const,
      status: 'PUBLISHED' as const,
      metadata: {
        week,
        year,
        trendsAnalyzed: trends.length,
        generatedAt: now.toISOString(),
        mockGeneration: true
      }
    }

    // „Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
    const article = await prisma.aIArticle.create({
      data: mockArticle
    })

    return NextResponse.json({
      status: 'success',
      message: 'Mock weekly report generated successfully',
      data: {
        articleId: article.id,
        title: article.title,
        trendsAnalyzed: trends.length
      },
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Mock weekly report generation error:', error)
    return NextResponse.json(
      {
        status: 'error',
        message: 'Failed to generate mock weekly report',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    )
  }
}
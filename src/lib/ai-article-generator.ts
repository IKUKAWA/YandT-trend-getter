import Anthropic from '@anthropic-ai/sdk'
import { prisma } from './db'
import { Platform, ArticleType, ArticleStatus } from '@prisma/client'
import { format, getWeek, getMonth, getYear } from 'date-fns'
import { ja } from 'date-fns/locale'

export class AIArticleGenerator {
  private anthropic: Anthropic

  constructor() {
    const apiKey = process.env.ANTHROPIC_API_KEY
    if (!apiKey) {
      throw new Error('ANTHROPIC_API_KEY is required')
    }

    this.anthropic = new Anthropic({
      apiKey,
    })
  }

  async generateWeeklyReport(weekNumber: number, year: number): Promise<string> {
    console.log(`üìù Generating weekly report for Week ${weekNumber}, ${year}`)

    const youtubeData = await prisma.trendData.findMany({
      where: {
        platform: Platform.YOUTUBE,
        weekNumber,
        year,
      },
      orderBy: { views: 'desc' },
      take: 10,
    })

    const tiktokData = await prisma.trendData.findMany({
      where: {
        platform: Platform.TIKTOK,
        weekNumber,
        year,
      },
      orderBy: { views: 'desc' },
      take: 10,
    })

    const prompt = this.createWeeklyReportPrompt(youtubeData, tiktokData, weekNumber, year)
    
    try {
      const response = await this.anthropic.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 4000,
        temperature: 0.7,
        messages: [
          {
            role: 'user',
            content: prompt,
          },
        ],
      })

      const content = response.content[0]
      if (content.type !== 'text') {
        throw new Error('Unexpected response format from Claude')
      }

      const article = await this.saveArticle({
        title: `${year}Âπ¥Á¨¨${weekNumber}ÈÄ±„ÅÆ„Éà„É¨„É≥„ÉâÂàÜÊûê„É¨„Éù„Éº„Éà`,
        content: content.text,
        articleType: ArticleType.WEEKLY,
        platforms: [Platform.YOUTUBE, Platform.TIKTOK],
        metadata: {
          weekNumber,
          year,
          dataCount: {
            youtube: youtubeData.length,
            tiktok: tiktokData.length,
          },
        },
      })

      return article.id
    } catch (error) {
      console.error('Failed to generate weekly report:', error)
      throw error
    }
  }

  async generateMonthlyReport(monthNumber: number, year: number): Promise<string> {
    console.log(`üìù Generating monthly report for ${year}/${monthNumber}`)

    const youtubeData = await prisma.trendData.findMany({
      where: {
        platform: Platform.YOUTUBE,
        monthNumber,
        year,
      },
      orderBy: { views: 'desc' },
      take: 20,
    })

    const tiktokData = await prisma.trendData.findMany({
      where: {
        platform: Platform.TIKTOK,
        monthNumber,
        year,
      },
      orderBy: { views: 'desc' },
      take: 20,
    })

    const prompt = this.createMonthlyReportPrompt(youtubeData, tiktokData, monthNumber, year)
    
    try {
      const response = await this.anthropic.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 5000,
        temperature: 0.7,
        messages: [
          {
            role: 'user',
            content: prompt,
          },
        ],
      })

      const content = response.content[0]
      if (content.type !== 'text') {
        throw new Error('Unexpected response format from Claude')
      }

      const article = await this.saveArticle({
        title: `${year}Âπ¥${monthNumber}Êúà„ÅÆ„Éà„É¨„É≥„ÉâÂàÜÊûê„É¨„Éù„Éº„Éà`,
        content: content.text,
        articleType: ArticleType.MONTHLY,
        platforms: [Platform.YOUTUBE, Platform.TIKTOK],
        metadata: {
          monthNumber,
          year,
          dataCount: {
            youtube: youtubeData.length,
            tiktok: tiktokData.length,
          },
        },
      })

      return article.id
    } catch (error) {
      console.error('Failed to generate monthly report:', error)
      throw error
    }
  }

  private createWeeklyReportPrompt(youtubeData: any[], tiktokData: any[], weekNumber: number, year: number): string {
    return `
„ÅÇ„Å™„Åü„ÅØÂ∞ÇÈñÄÁöÑ„Å™„Éà„É¨„É≥„ÉâÂàÜÊûê„É¨„Éù„Éº„Éà„Çí‰ΩúÊàê„Åô„ÇãAI„É©„Ç§„Çø„Éº„Åß„Åô„ÄÇ
‰ª•‰∏ã„ÅÆ„Éá„Éº„Çø„ÇíÂü∫„Å´„ÄÅ${year}Âπ¥Á¨¨${weekNumber}ÈÄ±„ÅÆ„Éà„É¨„É≥„ÉâÂàÜÊûê„É¨„Éù„Éº„Éà„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

## YouTube „Éà„É¨„É≥„Éâ„Éá„Éº„ÇøÔºà‰∏ä‰Ωç10‰ª∂Ôºâ
${youtubeData.map((video, index) => `
${index + 1}. ${video.title}
   - ÂÜçÁîüÊï∞: ${video.views?.toString() || 'N/A'}
   - „ÅÑ„ÅÑ„Å≠Êï∞: ${video.likes || 'N/A'}
   - „Ç´„ÉÜ„Ç¥„É™: ${video.category || 'N/A'}
   - „Éè„ÉÉ„Ç∑„É•„Çø„Ç∞: ${video.hashtags.join(', ')}
`).join('\n')}

## TikTok „Éà„É¨„É≥„Éâ„Éá„Éº„ÇøÔºà‰∏ä‰Ωç10‰ª∂Ôºâ
${tiktokData.map((video, index) => `
${index + 1}. ${video.title}
   - ÂÜçÁîüÊï∞: ${video.views?.toString() || 'N/A'}
   - „ÅÑ„ÅÑ„Å≠Êï∞: ${video.likes || 'N/A'}
   - „Ç´„ÉÜ„Ç¥„É™: ${video.category || 'N/A'}
   - „Éè„ÉÉ„Ç∑„É•„Çø„Ç∞: ${video.hashtags.join(', ')}
`).join('\n')}

## Ë®ò‰∫ãË¶Å‰ª∂
- ÊñáÂ≠óÊï∞: 1500-2000ÊñáÂ≠ó
- ÊßãÊàê: ÊòéÁ¢∫„Å™Ë¶ãÂá∫„ÅóÊßãÈÄ†
- ÂÜÖÂÆπ: ÂÆ¢Ë¶≥ÁöÑ„ÅßÊ¥ûÂØü„Å´ÂØå„Çì„Å†ÂàÜÊûê
- Êñá‰Ωì: Ë™≠„Åø„ÇÑ„Åô„ÅèÂ∞ÇÈñÄÁöÑ
- SEO: ÈÅ©Âàá„Å™„Ç≠„Éº„ÉØ„Éº„Éâ‰ΩøÁî®

## Ë®ò‰∫ãÊßãÊàê
# ${year}Âπ¥Á¨¨${weekNumber}ÈÄ±„ÅÆ„Éà„É¨„É≥„ÉâÂàÜÊûê„É¨„Éù„Éº„Éà

## 1. ‰ªäÈÄ±„ÅÆ„Éà„É¨„É≥„ÉâÊ¶ÇË¶Å

## 2. YouTube„Éà„É¨„É≥„ÉâÂàÜÊûê
### ‰∏ªË¶Å„Éà„É¨„É≥„Éâ
### Ê≥®ÁõÆ„Ç´„ÉÜ„Ç¥„É™

## 3. TikTok„Éà„É¨„É≥„ÉâÂàÜÊûê
### ‰∏ªË¶Å„Éà„É¨„É≥„Éâ
### „Éê„Ç§„É©„É´„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÁâπÂæ¥

## 4. „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÊØîËºÉ
### ÂÖ±ÈÄö„Éà„É¨„É≥„Éâ
### „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Âõ∫Êúâ„ÅÆÁâπÂæ¥

## 5. ‰ªäÂæå„ÅÆÂ±ïÊúõ

## 6. „Åæ„Å®„ÇÅ

‰∏äË®ò„ÅÆÊßãÊàê„Åß„ÄÅ„Éá„Éº„Çø„Å´Âü∫„Å•„ÅÑ„ÅüÂÖ∑‰ΩìÁöÑ„Åß‰æ°ÂÄ§„ÅÆ„ÅÇ„ÇãÂàÜÊûêË®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
Êï∞ÂÄ§„ÇÑ„Éà„É¨„É≥„Éâ„ÅÆÂ§âÂåñ„Å´Ë®ÄÂèä„Åó„ÄÅË™≠ËÄÖ„Å´„Å®„Å£„Å¶ÊúâÁõä„Å™Ê¥ûÂØü„ÇíÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
`
  }

  private createMonthlyReportPrompt(youtubeData: any[], tiktokData: any[], monthNumber: number, year: number): string {
    const monthName = format(new Date(year, monthNumber - 1), 'MMMM', { locale: ja })
    
    return `
„ÅÇ„Å™„Åü„ÅØÂ∞ÇÈñÄÁöÑ„Å™„Éà„É¨„É≥„ÉâÂàÜÊûê„É¨„Éù„Éº„Éà„Çí‰ΩúÊàê„Åô„ÇãAI„É©„Ç§„Çø„Éº„Åß„Åô„ÄÇ
‰ª•‰∏ã„ÅÆ„Éá„Éº„Çø„ÇíÂü∫„Å´„ÄÅ${year}Âπ¥${monthName}„ÅÆ„Éà„É¨„É≥„ÉâÂàÜÊûê„É¨„Éù„Éº„Éà„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

## YouTube „Éà„É¨„É≥„Éâ„Éá„Éº„ÇøÔºà‰∏ä‰Ωç20‰ª∂Ôºâ
${youtubeData.map((video, index) => `
${index + 1}. ${video.title}
   - ÂÜçÁîüÊï∞: ${video.views?.toString() || 'N/A'}
   - „ÅÑ„ÅÑ„Å≠Êï∞: ${video.likes || 'N/A'}
   - „Ç´„ÉÜ„Ç¥„É™: ${video.category || 'N/A'}
   - „Éè„ÉÉ„Ç∑„É•„Çø„Ç∞: ${video.hashtags.join(', ')}
`).join('\n')}

## TikTok „Éà„É¨„É≥„Éâ„Éá„Éº„ÇøÔºà‰∏ä‰Ωç20‰ª∂Ôºâ
${tiktokData.map((video, index) => `
${index + 1}. ${video.title}
   - ÂÜçÁîüÊï∞: ${video.views?.toString() || 'N/A'}
   - „ÅÑ„ÅÑ„Å≠Êï∞: ${video.likes || 'N/A'}
   - „Ç´„ÉÜ„Ç¥„É™: ${video.category || 'N/A'}
   - „Éè„ÉÉ„Ç∑„É•„Çø„Ç∞: ${video.hashtags.join(', ')}
`).join('\n')}

## Ë®ò‰∫ãË¶Å‰ª∂
- ÊñáÂ≠óÊï∞: 2500-3000ÊñáÂ≠ó
- ÊßãÊàê: Ë©≥Á¥∞„Å™Ë¶ãÂá∫„ÅóÊßãÈÄ†
- ÂÜÖÂÆπ: Ê∑±„ÅÑÂàÜÊûê„Å®Ê¥ûÂØü
- Êñá‰Ωì: Â∞ÇÈñÄÁöÑ„ÅßË™≠„Åø„ÇÑ„Åô„ÅÑ
- SEO: ÊúàÈñì„Éà„É¨„É≥„Éâ„Ç≠„Éº„ÉØ„Éº„ÉâÊúÄÈÅ©Âåñ

## Ë®ò‰∫ãÊßãÊàê
# ${year}Âπ¥${monthName}„ÅÆ„Éà„É¨„É≥„ÉâÂàÜÊûê„É¨„Éù„Éº„Éà

## 1. ÊúàÈñì„Éà„É¨„É≥„ÉâÁ∑èÊã¨

## 2. YouTube„Éà„É¨„É≥„ÉâË©≥Á¥∞ÂàÜÊûê
### „Ç´„ÉÜ„Ç¥„É™Âà•„Éà„É¨„É≥„Éâ
### ÊàêÈï∑Áéá„ÅÆÈ´ò„ÅÑ„Ç≥„É≥„ÉÜ„É≥„ÉÑ
### Ë©±È°å„ÅÆ„ÇØ„É™„Ç®„Ç§„Çø„Éº

## 3. TikTok„Éà„É¨„É≥„ÉâË©≥Á¥∞ÂàÜÊûê
### „Éê„Ç§„É©„É´„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞
### ‰∫∫Ê∞ó„Ç≥„É≥„ÉÜ„É≥„ÉÑÂΩ¢Âºè
### Êñ∞Ëàà„Éà„É¨„É≥„Éâ

## 4. „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Ê®™Êñ≠ÂàÜÊûê
### ÂÖ±ÈÄö„Éà„Éî„ÉÉ„ÇØ
### Áõ∏‰∫íÂΩ±ÈüøÈñ¢‰øÇ
### „É¶„Éº„Ç∂„ÉºË°åÂãï„Éë„Çø„Éº„É≥

## 5. Ê•≠Áïå„Å∏„ÅÆÂΩ±Èüø
### „Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞Ë¶≥ÁÇπ
### „Ç≥„É≥„ÉÜ„É≥„ÉÑÊà¶Áï•„Å∏„ÅÆÁ§∫ÂîÜ

## 6. Êù•Êúà„ÅÆ‰∫àÊ∏¨

## 7. Á∑èÊã¨

‰∏äË®ò„ÅÆÊßãÊàê„Åß„ÄÅÊúàÈñì„ÅÆÂåÖÊã¨ÁöÑ„Å™„Éà„É¨„É≥„ÉâÂàÜÊûêË®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
„Éá„Éº„Çø„Éâ„É™„Éñ„É≥„Å™ÂàÜÊûê„Å®Â∞ÜÊù•‰∫àÊ∏¨„ÇíÂê´„ÇÅ„Å¶„ÄÅË™≠ËÄÖ„Å´‰æ°ÂÄ§„ÅÆ„ÅÇ„ÇãÊ¥ûÂØü„ÇíÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
`
  }

  private async saveArticle(data: {
    title: string
    content: string
    articleType: ArticleType
    platforms: Platform[]
    metadata: any
  }) {
    const summary = this.generateSummary(data.content)
    
    return await prisma.aIArticle.create({
      data: {
        title: data.title,
        content: data.content,
        summary,
        articleType: data.articleType,
        platforms: data.platforms,
        metadata: data.metadata,
        status: ArticleStatus.DRAFT,
      },
    })
  }

  private generateSummary(content: string): string {
    const lines = content.split('\n').filter(line => line.trim())
    const firstParagraph = lines.find(line => 
      line.length > 50 && 
      !line.startsWith('#') && 
      !line.startsWith('##')
    )
    
    return firstParagraph?.substring(0, 200) + '...' || 'Ë®ò‰∫ã„ÅÆË¶ÅÁ¥Ñ„ÅåÁîüÊàê„Åï„Çå„Åæ„Åó„Åü„ÄÇ'
  }

  async publishArticle(articleId: string): Promise<void> {
    await prisma.aIArticle.update({
      where: { id: articleId },
      data: {
        status: ArticleStatus.PUBLISHED,
        publishedAt: new Date(),
      },
    })
  }

  async getArticles(status?: ArticleStatus, limit = 20) {
    return await prisma.aIArticle.findMany({
      where: status ? { status } : undefined,
      orderBy: { createdAt: 'desc' },
      take: limit,
    })
  }

  async getArticleById(id: string) {
    return await prisma.aIArticle.findUnique({
      where: { id },
    })
  }
}